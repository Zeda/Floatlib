#include "header.z80"
#ifdef EXT_PREC
#define SIZE_OF_FLOAT 10
bufptr=$86EC
#else
#define SIZE_OF_FLOAT 4
bufptr=vars
#endif
cx   = bufptr+SIZE_OF_FLOAT
cy   = cx+SIZE_OF_FLOAT
delta= cy+SIZE_OF_FLOAT
zx   = delta+SIZE_OF_FLOAT
zy   = zx+SIZE_OF_FLOAT
zx2  = zy+SIZE_OF_FLOAT
zy2  = zx2+SIZE_OF_FLOAT
mask = zy2+SIZE_OF_FLOAT
lcd_y= mask+1
x    = lcd_y+1
y    = x+1
tmp  = tmp+1

gbuf = 9340h
maxiter=16
start:
    in a,(2)
    add a,a
    sbc a,a
    and 3
    out (20h),a
    call init   ;initialize keyboard, LCD, variables
forx:
    ld a,64     ;set Y counter to 64
    ld (y),a
#ifdef EXT_PREC
    fmovx(cy_init_ext,cy)
    fmovx(delta_init_ext,delta)
#else
    ffmov(cy_init,cy)
    ffmov(delta_init,delta)
#endif
fory:
    in a,(1)    ;poll the keyboard for [Clear]
    and 40h
    ret z
    in a,(4)    ;poll for [ON]
    and 8
    ret z
#ifdef EXT_PREC
    fmovx(cx,zx)
    fmovx(cy,zy)
    mulx(zx,zx,zx2)
    mulx(zy,zy,zy2)
#else
    ffmov(cx,zx)
    ffmov(cy,zy)
    fmul(zx,zx,zx2)
    fmul(zy,zy,zy2)
#endif
    ld a,maxiter
    jp endwhile
startwhile:
#ifdef EXT_PREC
    mulx(zx,zy,zy)
    ld hl,(zy+8)      ;multiply zy by 2 by incrementing the exponent. No worries of overflow, so we can do this cheaply
    inc hl
    ld (zy+8),hl
    addx(cy,zy,zy)
    subx(zx2,zy2,zx)
    addx(cx,zx,zx)
    mulx(zx,zx,zx2)
    mulx(zy,zy,zy2)
#else
    fmul(zx,zy,zy)
    ld hl,zy+3      ;multiply zy by 2 by incrementing the exponent. No worries of overflow, so we can do this cheaply
    inc (hl)
    fadd(cy,zy,zy)
    fsub(zx2,zy2,zx)
    fadd(cx,zx,zx)
    fmul(zx,zx,zx2)
    fmul(zy,zy,zy2)
#endif
endwhile:
    dec a
    jr z,plotcalc
#ifdef EXT_PREC
  push af
    addx(zx2,zy2,tmp)
    ;fcmp(tmp,four)
    ld hl,(tmp+8)
    res 7,h
    ld bc,-$4002
    add hl,bc
  pop hl
  ld a,h
  jr nc,startwhile
#else
    fadd(zx2,zy2,tmp)
    ;fcmp(tmp,four)
    ld h,a
    ld a,(tmp+3)       ;check if tmp>=4. This happens if and only if the exponent of tmp is 82h or higher.
    cp 82h
    ld a,h
    jr c,startwhile
#endif
plotcalc:
    or a            ;plot the pixel if counter reached zero
    ld a,(mask)
    ld hl,(bufptr)
    jr z,+_
    cpl
    and (hl)
    .db $FE   ;start of `cp *`
_:
    or (hl)
    ld (hl),a
    out (17),a
    ld de,12
    add hl,de
    ld (bufptr),hl
#ifdef EXT_PREC
    addx(cy,delta,cy)
#else
    fadd(cy,delta,cy)
#endif
    ld hl,y
    dec (hl)
    jp nz,fory
#ifdef EXT_PREC
    addx(cx,delta,cx)
#else
    fadd(cx,delta,cx)
#endif
    ld hl,(bufptr)
    ld a,(mask)
    dec h
    dec h
    dec h
    rrca
    ld (mask),a
    jr nc,+_
    inc l
    ld a,(lcd_y)
    inc a
    out (16),a
    cp 2Ch
    ld (lcd_y),a
_:
    ld (bufptr),hl
    ld hl,x
    dec (hl)
    jp nz,forx
    ret
init:
    di
    ld a,80h        ;Program the LCD to move the index to the top
    out (16),a
    ;ld a,80h       ;load the mask for the pixel data. Commented since 'a' is already 80h
    ld (mask),a
    ld hl,gbuf      ;load the ptr to the actual pixel data
    ld (bufptr),hl
    ld a,96           ;set X counter
    ld (x),a
#ifdef EXT_PREC
    fmovx(cx_init_ext,cx)
#else
    ffmov(cx_init,cx)
#endif
    ld a,$FD        ;Program the keyboard to only poll for keys in the [Enter] through [Clear] range
    out (1),a
    ld a,20h
    ld (lcd_y),a
    out(16),a
    xor a
    ld hl,gbuf
    ld (hl),a
    ld de,gbuf+1
    ld bc,767
    ldir
    ret
#ifdef EXT_PREC
cx_init_ext:
  .db $00,$00,$00,$00,$00,$00,$00,$80 \ .dw $C001 ;-2.0
cy_init_ext:
  .db $00,$00,$00,$00,$00,$00,$00,$80 \ .dw $C000 ;-1.0
delta_init_ext:
  .db $00,$00,$00,$00,$00,$00,$00,$80 \ .dw $3FFB ;.03125
#else
cx_init:
    .db $00,$00,$80,$81 ;-2.0
;    .db $00,$00,$80,$80 ;-1.0
;    .db $51,$D6,$56,$7E ;.41960384
;    .db $00,$00,$A0,$80 ;-1.25
cy_init:
;    .db $00,$00,$80,$81 ;-2.0
    .db $00,$00,$80,$80 ;-1.0
;    .db $7C,$AA,$48,$7D ;.19596284
;    .db $00,$00,$80,$7E ;-.25
;48aa7C
delta_init:
;    .db $00,$00,$00,$7C ;.0625
    .db $00,$00,$00,$7B ;.03125
;    .db $1b,$29,$1d,$73 ;.00007494
;    .db $00,$00,$00,$79 ;1/128
#endif
.echo "Size: ",$-$9D95," bytes"
