;1 is a routine
;2 is text
readme:
;;HL points to the readme data
    set textWrite,(iy+sGrFlags)
    ld c,(hl)
    inc hl
    ld b,(hl)
    inc hl
    xor a
    ld d,a
    ld e,a
    ld (penCol),de
    call dispPage
readme_loop:
;A is the cursor position
;BC is the number of entries
;DE is the LUT offset
;HL points to the LUT
    push af
    call readme_rectInv
_:
    call key_wait
    ex (sp),hl
    ld l,a
    ld a,h
    call readme_rectInv
    ld a,l
    ex (sp),hl
    cp 15
    jr z,readme_exit
    cp 9
    jr z,forward_page
    dec a
    jr z,down
    dec a
    jr z,back_page
    dec a
    jr z,forward_page
    dec a
    jr nz,readme_loop+1
up:
    pop af
    or a
    jp z,scroll_up
    dec a
    jr readme_loop
down:
    pop af
    cp 9
    jp z,scroll_down
    inc a
    jr readme_loop
forward_page:
    pop af
    push hl
    push de
    push bc
    push af
    add a,e
    ld e,a
    jr nc,$+4
    inc d
    or a
    ex de,hl
    sbc hl,bc
    jr nc,+_
    add hl,bc
    add hl,hl
    add hl,de
    ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    xor a
    ld c,a
    ld b,a
    cpir
    ld a,(hl)
    dec a
    jr nz,+_
    inc hl
    ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    call z,readme
    xor a
_:
    dec a
    jr nz,+_
    inc hl
    ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    call _jpHL
_:
    pop af
    pop bc
    pop de
    pop hl
    jp readme_loop-3
back_page:
readme_exit:
    pop af
    ret
dispHex:
    ld d,(hl)
    inc hl
    ld a,(hl)
    inc hl
    push hl
    push de
    call +_
    pop af
    call +_
    ld a,6
    bcall(_VPutMap)
    pop hl
    ret
_:
    push af
    rrca
    rrca
    rrca
    rrca
    call +_
    pop af
_:
    and 15
    cp 10
    ccf
    adc a,30h
    daa
    bcall(_VPutMap)
    ret
updateLCD:
    call pushpop
    bcall(_GrBufCpy)
    ret
dispPage:
    push af
    call clrgBuf
    xor a
dispPageLoop:
    call dispLine
    inc a
    cp 10
    jr nz,dispPageLoop
    pop af
    ret
readme_rectInv:
    call pushpop
    call updateLCD
    ld e,a
    add a,a
    add a,e
    add a,a
    ld h,a
    add a,5
    ld d,a
    ld l,0
    ld e,95
    bcall(_InvertRect)
    ret
dispLine:
;preserve registers
;load coords into penCol, penRow
;need (DE+A)<BC
;display HL+(DE+A)*2
    call pushpop
    push hl
    ld l,a
    add a,a
    add a,l
    add a,a
    ld h,a
    ld a,l
    ld l,0
    ld (penCol),hl
    pop hl
    add a,e
    jr nc,$+4
    inc d
    or a
    ld e,a
    ex de,hl
    sbc hl,bc
    ret nc
    add hl,bc
    add hl,hl
    add hl,de
    ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    ld b,(hl)
    inc hl
    dec b
    call z,dispHex
    call dispStr
    ld a,(hl)
    dec a
    jr nz,$+12
    ld a,91
    ld (penCol),a
    ld a,5
    bcall(_VPutMap)
    ret
clrgBuf:
  call pushpop
  ld hl,gBuf
  xor a
  ld (hl),a
  ld de,gBuf+1
  ld bc,767
  call mov7
_:
  call mov10
  jp pe,-_
  ret
dispStr:
  ld a,(hl)
  inc hl
  or a
  ret z
  dec a
  jr z,+_
  inc a
  bcall(_VPutMap)
  jr dispStr
_:
  push de
  ld e,(hl)
  inc hl
  ld d,(hl)
  inc hl
  ex (sp),hl
  ex de,hl
  call dispStr
  pop hl
  jr dispStr
scroll_up:
  push hl
  ld h,a
  ld a,e
  or d
  ld a,h
  pop hl
  jp z,readme_loop
  dec de
  call +_
  call dispLine
  jp readme_loop
_:
  call pushpop
  ld de,gBuf+719
  ld hl,gBuf+719-72
  ld bc,648
  lddr
  ex de,hl
  ld b,72
  ld (hl),c \ dec hl \ djnz $-2
  ret
scroll_down:
  push hl
  ld hl,10
  add hl,de
  sbc hl,bc
  pop hl
  jp nc,readme_loop
  inc de
  call +_
  call dispLine
  jp readme_loop
_:
  call pushpop
  ld de,gBuf
  ld hl,gBuf+72
  ld bc,648
  ldir
  ex de,hl
  ld b,72
  ld (hl),c \ inc hl \ djnz $-2
  ret
key_wait:
    ei
_:
    halt
    call key_debounce
    or a
    jr z,-_
    ret
key_debounce:
    push hl
    ld a,(843Fh)
    ld hl,(curKey) ;L=curKey, H=keyCnt
    cp l
    ld l,a
    ld a,0
    jr z,$+5
    ld a,l
    ld h,11
    dec h
    jp p,$+6
    ld a,l
    ld h,5
    ld (curKey),hl
    pop hl
    ret
_jpHL:
    jp (hl)
readme_Data:
.dw (d_00-$-2)/2,d_00,d_01,d_02,d_03,d_04  ;,d_05
d_00: .db 2,"Navigate with",$1E,$1F,0,0
d_01: .db 2,$05," or ",$C1,"Enter] opens a page",0,0
d_02: .db 2,$CF," or ",$C1,"Clear] closes a page",0,0
d_03: .db 2,"Routines",0,1 \ .dw routines
d_04: .db 2,"ASM Opcode Header",0,1 \ .dw asmopheader
;d_05: .db 2,"ASMComp (by Zeda T.)",0,2 \ .dw ASMComp
asmopheader:
.dw (a_00-$-2)/2,a_00,a_01,a_02,a_03,a_04,a_05,a_06,a_07,a_08,a_09,a_0A,a_0B,a_0C,a_0D
a_00: .db 2,6,"180914466C6F61746C6962",0,0
a_01: .db 2,6,"21979DE7EF4E4CD847DB06",0,0
a_02: .db 2,6,"F578D306CDB69DF1D306C9",0,0
a_03: .db 2,0,0
a_04: .db 2,"This code loads the app and",0,0
a_05: .db 2,"puts it away properly, so you",0,0
a_06: .db 2,"can use any of its calls.",0,0
a_07: .db 2,0,0
a_08: .db 2,"After this is your code, which",0,0
a_09: .db 2,"starts at $9DB6, NOT $9D95!",0,0
a_0A: .db 2,0,0
a_0B: .db 2,"The Routines section has the",0,1 \ .dw routines
a_0C: .db 2,"call addresses. Remember to",0,0
a_0D: .db 2,"swap the order!",0,0

routines:
.dw (r_00-$-2)/2,r_00,r_01,r_02
r_00: .db 2,"Single Precision",0,1 \ .dw routinesSingle
r_01: .db 2,"Extended Precision",0,1 \ .dw xroutines
r_02: .db 2,"Miscellaneous",0,1 \ .dw miscr

miscr:
.dw (m_00-$-2)/2
.dw m_00,m_01,m_02,m_03,m_04,m_05,m_06,m_07,m_08,m_09,m_0A,m_0B,m_0C,m_0D,m_0E,m_0F
.dw m_10,m_11,m_12,m_13
m_00: .db 1 \ .dw jumptable+279 \ .db "BC*DE",$1C,"DEHL",$1C,"CAHL",0,0
m_01: .db 1 \ .dw jumptable+282 \ .db "BDE*CHL",$1C,"HLBCDE",0,0
m_02: .db 1 \ .dw jumptable+285 \ .db "DEHL*BCIX",$1C,"(z0_32)",0,1 \ .dw locations
m_03: .db 1 \ .dw jumptable+288 \ .db "mxOP1*mxOP2",$1C,"(z0_64)",0,1 \ .dw locations
m_04: .db 1 \ .dw jumptable+291 \ .db "C*BDE",$1C,"CAHL",0,0
m_05: .db 1 \ .dw jumptable+294 \ .db "rand",$1C,"HL",0,0
m_06: .db 1 \ .dw jumptable+297 \ .db "Initialize rand",0,0
m_07: .db 1 \ .dw jumptable+300 \ .db $10,"(HL)",$1C,"A, HL=remainder",0,0
m_08: .db 1 \ .dw jumptable+303 \ .db $10,"(.HLDE)",$1C,"(xOP2+8)",0,1 \ .dw locations
m_09: .db 1 \ .dw jumptable+342 \ .db $10,"(HLIX)",$1C,"DE, AHL=remainder",0,0
m_0A: .db 1 \ .dw jumptable+306 \ .db "sqrt64",0,0
m_0B: .db 1 \ .dw jumptable+309 \ .db "div16",0,0
m_0C: .db 1 \ .dw jumptable+312 \ .db "div32_16",0,0
m_0D: .db 1 \ .dw jumptable+315 \ .db "div32",0,0
m_0E: .db 1 \ .dw jumptable+318 \ .db "div64_32",0,0
m_0F: .db 1 \ .dw jumptable+321 \ .db "div64",0,0
m_10: .db 1 \ .dw jumptable+324 \ .db "mov4",0,0
m_11: .db 1 \ .dw jumptable+327 \ .db "mov10",0,0
m_12: .db 1 \ .dw jumptable+330 \ .db "swap xOP2 and xOP3",0,0
m_13: .db 1 \ .dw jumptable+3 \ .db "pushpop, restores regs on RET",0,0
m_14: .db 1 \ .dw jumptable+333 \ .db "di, restore ints on RET",0,0


locations:
.dw (l_00-$-2)/2
.dw l_00,l_01,l_02,l_03,l_04,l_05,l_06,l_07,l_08 ;,l_09,l_0A,l_0B,l_0C,l_0D,l_0E,l_0F
l_00: .db 1 \ .dw xOP1 \ .db "xOP1",0,0
l_01: .db 1 \ .dw xOP2 \ .db "xOP2",0,0
l_02: .db 1 \ .dw xOP3 \ .db "xOP3",0,0
l_03: .db 1 \ .dw xOP4 \ .db "xOP4",0,0
l_04: .db 1 \ .dw xOP5 \ .db "xOP5",0,0
l_05: .db 1 \ .dw seed0 \ .db "seed0",0,0
l_06: .db 1 \ .dw seed1 \ .db "seed1",0,0
l_07: .db 1 \ .dw z0_32 \ .db "z0_32",0,0
l_08: .db 1 \ .dw z0_64 \ .db "z0_64",0,0
;l_0: .db 1 \ .dw z0_64 \ .db "seed1",0,0



xroutines:
.dw (rx_04-$-2)/2
.dw rs_00,rs_01,rs_02,rs_03,rx_04,rx_05,rx_06,rx_07,rx_08,rx_09,rx_0A,rx_0B,rx_0C,rx_0D,rx_0E,rx_0F
.dw rx_10,rx_11,rx_12,rx_13,rx_14,rx_15,rx_16,rx_17,rx_18,rx_19,rx_1A,rx_1B,rx_1C,rx_1D,rx_1E,rx_1F
.dw rx_20,rx_21,rx_22,rx_23,rx_24,rx_25,rx_26,rx_27,rx_28,rx_29,rx_2A,rx_2B,rx_2C
rx_04: .db 1 \ .dw jumptable+159 \ .db 1 \ .dw str_0 \ .db 0,1 \ .dw rx_Constants
rx_05: .db 1 \ .dw jumptable+162 \ .db 1 \ .dw str_1 \ .db 0,0
rx_06: .db 1 \ .dw jumptable+165 \ .db 1 \ .dw str_2 \ .db 0,0
rx_07: .db 1 \ .dw jumptable+168 \ .db 1 \ .dw str_3 \ .db 0,0
rx_08: .db 1 \ .dw jumptable+171 \ .db 1 \ .dw str_4 \ .db 0,0
rx_09: .db 1 \ .dw jumptable+174 \ .db 1 \ .dw str_5 \ .db 0,0
rx_0A: .db 1 \ .dw jumptable+177 \ .db 1 \ .dw str_6 \ .db 0,0
rx_0B: .db 1 \ .dw jumptable+180 \ .db 1 \ .dw str_7 \ .db 0,0
rx_0C: .db 1 \ .dw jumptable+183 \ .db 1 \ .dw str_8 \ .db 0,0
rx_0D: .db 1 \ .dw jumptable+186 \ .db 1 \ .dw str_9 \ .db 0,0
rx_0E: .db 1 \ .dw jumptable+189 \ .db 1 \ .dw str_10 \ .db 0,0
rx_0F: .db 1 \ .dw jumptable+192 \ .db 1 \ .dw str_11 \ .db 0,0
rx_10: .db 1 \ .dw jumptable+195 \ .db 1 \ .dw str_12 \ .db 0,0
rx_11: .db 1 \ .dw jumptable+198 \ .db 1 \ .dw str_13 \ .db 0,0

rx_12: .db 1 \ .dw jumptable+201 \ .db 1 \ .dw str_14 \ .db 0,0
rx_13: .db 1 \ .dw jumptable+204 \ .db 1 \ .dw str_15 \ .db 0,0
rx_14: .db 1 \ .dw jumptable+207 \ .db 1 \ .dw str_16 \ .db 0,0
rx_15: .db 1 \ .dw jumptable+210 \ .db 1 \ .dw str_17 \ .db 0,0
rx_16: .db 1 \ .dw jumptable+213 \ .db 1 \ .dw str_18 \ .db 0,0
rx_17: .db 1 \ .dw jumptable+216 \ .db 1 \ .dw str_19 \ .db 0,0
rx_18: .db 1 \ .dw jumptable+219 \ .db 1 \ .dw str_20 \ .db 0,0
rx_19: .db 1 \ .dw jumptable+222 \ .db 1 \ .dw str_21 \ .db 0,0

rx_1A: .db 1 \ .dw jumptable+225 \ .db 1 \ .dw str_22 \ .db 0,0
rx_1B: .db 1 \ .dw jumptable+228 \ .db 1 \ .dw str_23 \ .db 0,0
rx_1C: .db 1 \ .dw jumptable+231 \ .db 1 \ .dw str_24 \ .db 0,0
rx_1D: .db 1 \ .dw jumptable+234 \ .db 1 \ .dw str_25 \ .db 0,0
rx_1E: .db 1 \ .dw jumptable+237 \ .db 1 \ .dw str_26 \ .db 0,0
rx_1F: .db 1 \ .dw jumptable+240 \ .db 1 \ .dw str_27 \ .db 0,0
rx_20: .db 1 \ .dw jumptable+243 \ .db 1 \ .dw str_28 \ .db 0,0
rx_21: .db 1 \ .dw jumptable+246 \ .db 1 \ .dw str_29 \ .db 0,0
rx_22: .db 1 \ .dw jumptable+249 \ .db 1 \ .dw str_30 \ .db 0,0
rx_23: .db 1 \ .dw jumptable+252 \ .db 1 \ .dw str_31 \ .db 0,0
rx_24: .db 1 \ .dw jumptable+255 \ .db 1 \ .dw str_32 \ .db 0,0
rx_25: .db 1 \ .dw jumptable+258 \ .db 1 \ .dw str_33 \ .db 0,0

rx_26: .db 1 \ .dw jumptable+261 \ .db 1 \ .dw str_33 \ .db 0,0
rx_27: .db 1 \ .dw jumptable+264 \ .db 1 \ .dw str_34 \ .db 0,1 \ .dw r_rand
rx_28: .db 1 \ .dw jumptable+267 \ .db 1 \ .dw str_35 \ .db 0,0
rx_29: .db 1 \ .dw jumptable+270 \ .db 1 \ .dw str_36 \ .db 0,0
rx_2A: .db 1 \ .dw jumptable+273 \ .db 1 \ .dw str_37 \ .db 0,0
rx_2B: .db 1 \ .dw jumptable+276 \ .db 1 \ .dw str_38 \ .db 0,0
rx_2C: .db 1 \ .dw jumptable+339 \ .db 1 \ .dw str_39 \ .db 0,0

routinesSingle:
.dw (rs_00-$-2)/2
.dw rs_00,rs_01,rs_02,rs_03,rs_04,rs_05,rs_06,rs_07,rs_08,rs_09,rs_0A,rs_0B,rs_0C,rs_0D,rs_0E,rs_0F
.dw rs_10,rs_11,rs_12,rs_13,rs_14,rs_15,rs_16,rs_17,rs_18,rs_19,rs_1A,rs_1B,rs_1C,rs_1D,rs_1E,rs_1F
.dw rs_20,rs_21,rs_22,rs_23,rs_24,rs_25,rs_26,rs_27,rs_28,rs_29,rs_2A,rs_2B,rs_2C,rs_2D,rs_2E,rs_2F
.dw rs_30,rs_31,rs_32,rs_33,rs_34,rs_35,rs_36,rs_37,rs_38
rs_00: .db 2,"HL points to x.",0,0
rs_01: .db 2,"DE points to y.",0,0
rs_02: .db 2,"BC points to output.",0,0
rs_03: .db 2,0,0
rs_04: .db 1 \ .dw jumptable
str_0:
.db "Constants",0,1 \ .dw rs_Constants
rs_05: .db 1 \ .dw jumptable+6
str_1:
  .db "x+y",$1C,"z",0,0
rs_06: .db 1 \ .dw jumptable+9
str_2:
  .db "(x+y)/2",$1C,"z",0,0
rs_07: .db 1 \ .dw jumptable+12
str_3:
  .db "x-y",$1C,"z",0,0
rs_08: .db 1 \ .dw jumptable+15
str_4:
  .db "y-x",$1C,"z",0,0
rs_09: .db 1 \ .dw jumptable+18
str_5:
  .db "x/y",$1C,"z",0,0
rs_0A: .db 1 \ .dw jumptable+21
str_6:
  .db "1/x",$1C,"z",0,0
rs_0B: .db 1 \ .dw jumptable+24
str_7:
  .db "x*y",$1C,"z",0,0
rs_0C: .db 1 \ .dw jumptable+27
str_8:
  .db "x*10",$1C,"z",0,0
rs_0D: .db 1 \ .dw jumptable+30
str_9:
  .db $10,"(x)",$1C,"z",0,0
rs_0E: .db 1 \ .dw jumptable+33
str_10:
  .db $10,"(xy)",$1C,"z",0,0
rs_0F: .db 1 \ .dw jumptable+36
str_11:
  .db "x-y",$1C,"flags",0,0
rs_10: .db 1 \ .dw jumptable+39
str_12:
  .db "abs(x)",$1C,"z",0,0
rs_11: .db 1 \ .dw jumptable+42
str_13:
  .db "-x",$1C,"z",0,0

rs_12: .db 1 \ .dw jumptable+45
str_14:
  .db $DB,"^x",$1C,"z",0,0
rs_13: .db 1 \ .dw jumptable+48
str_15:
  .db "2^x",$1C,"z",0,0
rs_14: .db 1 \ .dw jumptable+51
str_16:
  .db "10^x",$1C,"z",0,0
rs_15: .db 1 \ .dw jumptable+54
str_17:
  .db "x^y",$1C,"z",0,0
rs_16: .db 1 \ .dw jumptable+57
str_18:
  .db "ln(x)",$1C,"z",0,0
rs_17: .db 1 \ .dw jumptable+60
str_19:
  .db "log2(x)",$1C,"z",0,0
rs_18: .db 1 \ .dw jumptable+63
str_20:
  .db "log10(x)",$1C,"z",0,0
rs_19: .db 1 \ .dw jumptable+66
str_21:
  .db "log_y(x)",$1C,"z",0,0

rs_1A: .db 1 \ .dw jumptable+69
str_22:
  .db "acos(x)",$1C,"z",0,0
rs_1B: .db 1 \ .dw jumptable+72
str_23:
  .db "acosh(x)",$1C,"z",0,0
rs_1C: .db 1 \ .dw jumptable+75
str_24:
  .db "asin(x)",$1C,"z",0,0
rs_1D: .db 1 \ .dw jumptable+78
str_25:
  .db "asinh(x)",$1C,"z",0,0
rs_1E: .db 1 \ .dw jumptable+81
str_26:
  .db "atan(x)",$1C,"z",0,0
rs_1F: .db 1 \ .dw jumptable+84
str_27:
  .db "atanh(x)",$1C,"z",0,0
rs_20: .db 1 \ .dw jumptable+87
str_28:
  .db "cos(x)",$1C,"z",0,0
rs_21: .db 1 \ .dw jumptable+90
str_29:
  .db "cosh(x)",$1C,"z",0,0
rs_22: .db 1 \ .dw jumptable+93
str_30:
  .db "sin(x)",$1C,"z",0,0
rs_23: .db 1 \ .dw jumptable+96
str_31:
  .db "sinh(x)",$1C,"z",0,0
rs_24: .db 1 \ .dw jumptable+99
str_32:
  .db "tan(x)",$1C,"z",0,0
rs_25: .db 1 \ .dw jumptable+102
str_33:
  .db "tanh(x)",$1C,"z",0,0

rs_26: .db 1 \ .dw jumptable+105 \ .db "1/BG(x,y)",$1C,"z special",0,0
rs_27: .db 1 \ .dw jumptable+108 \ .db "1/BG(x,y)",$1C,"z general",0,0
rs_28: .db 1 \ .dw jumptable+111 \ .db "x/255",$1C,"z",0,0
rs_29: .db 1 \ .dw jumptable+114 \ .db "x/85",$1C,"z",0,0
rs_2A: .db 1 \ .dw jumptable+117 \ .db "x/51",$1C,"z",0,0
rs_2B: .db 1 \ .dw jumptable+120 \ .db "x/17",$1C,"z",0,0
rs_2C: .db 1 \ .dw jumptable+123 \ .db "x/15",$1C,"z",0,0
rs_2D: .db 1 \ .dw jumptable+126 \ .db "x/5",$1C,"z",0,0
rs_2E: .db 1 \ .dw jumptable+129 \ .db "x/3",$1C,"z",0,0
rs_2F: .db 1 \ .dw jumptable+132 \ .db "3x/8",$1C,"z",0,0
rs_30: .db 1 \ .dw jumptable+135 \ .db "11x/32",$1C,"z",0,0
rs_31: .db 1 \ .dw jumptable+138 \ .db "21x/512",$1C,"z",0,0

rs_32: .db 1 \ .dw jumptable+141
str_34:
  .db "rand",$1C,"z",0,1 \ .dw r_rand
rs_33: .db 1 \ .dw jumptable+144
str_35:
  .db "str(x)",$1C,"z",0,0
rs_34: .db 1 \ .dw jumptable+147
str_36:
  .db "TIFloat(x)",$1C,"z",0,0
rs_35: .db 1 \ .dw jumptable+150
str_37:
  .db "str",$1C,"single",0,0
rs_36: .db 1 \ .dw jumptable+153
str_38:
  .db "TI(x)",$1C,"float(z)",0,0
rs_37: .db 1 \ .dw jumptable+156 \ .db "uint8(x)",$1C,"z",0,0

rs_38: .db 1 \ .dw jumptable+336
str_39:
  .db "x mod 1",$1C,"z",0,0

rx_Constants:
rs_Constants:
.dw (c_-$-2)/2,c_,c_00,c_01,c_02,c_03,c_04,c_05,c_06,c_07,c_08,c_09,c_0A
c_: .db 2,"Constants. A is the ID",0
c_00: .db 2,"00",6,$1C,6,$C4,0 ;pi
c_01: .db 2,"01",6,$1C,6,$DB,0 ;e
c_02: .db 2,"02",6,$1C,6,"log2(",$DB,")",0
c_03: .db 2,"03",6,$1C,6,"ln(2)",0
c_04: .db 2,"04",6,$1C,6,"log10(2)",0
c_05: .db 2,"05",6,$1C,6,"log2(10)",0
c_06: .db 2,"06",6,$1C,6,"0",0
c_07: .db 2,"07",6,$1C,6,"1",0
c_08: .db 2,"08",6,$1C,6,"+inf",0
c_09: .db 2,"09",6,$1C,6,$1A,"inf",0
c_0A: .db 2,"0A",6,$1C,6,"NaN",0

r_rand:
.dw 2,m_05,m_06
.echo "readme data:",$-readme_Data," bytes"
